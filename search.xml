<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MrakDown初步学习]]></title>
    <url>%2F2017%2F06%2F08%2FMrakDown%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[MarkDown初学语法练习学习MarkDown 注意中英文切换！！！ 标题一级标题使用一个#,二级标题使用两个##依次往下 几级标题 用几个#表示，最多六级标题。如下： 二级标题三级标题无序列表无序列表可以用-或者*进行表示。 无序列表 无序列表二 有序列表 有序列表 有序列表二 引用markdown中的引用使用的是 &gt; 这个符号 床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。 图片与链接插入链接百度 插入图片]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片拉伸处理]]></title>
    <url>%2F2017%2F06%2F07%2F%E5%9B%BE%E7%89%87%E6%8B%89%E4%BC%B8%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[摘要 在学习iOS以及平时做项目过程中，有时候我们需要对一张图片UIImage进行处理，让图片随着内容的增大或者缩小发生相应的改变而不会变形，这时候我们就需要对图片进行拉伸。 拉伸处理的方式 一般对图片进行拉伸处理有两种方式： - 方式一: 通过存放图片资源的`Assets` 进行处理 。 - 方式二: 通过代码设置图片的保护区域，对保护区域以外的地方进行拉伸。 实现 方式一: 借助Xocde中存放图片资源的文件夹Assets对图片进行处理. 新建项目 - &gt; 选择图片资源文件夹Assets -&gt; 将图片拖进去 -&gt; 选中图片 -&gt; 此时Xcode右上角会出现类似铅笔的一个标志 如图所示: 此时在铅笔的下方 找到 Slicing -&gt; 点击 slices 出现四个选项 None、Horzontal、Vertical、Horzontal and Vertical,分别代表不拉伸、水平拉伸、垂直拉伸以及水平垂直拉伸。根据情况自己选择，我这里选择水平垂直方向都拉伸。 如图所示: 这样就可以实现图片拉伸…. 方式二: 代码实现拉伸（设置图片保护区域） 12345678910111213141516//创建图片视图UIImageView *imageView =[[UIImageView alloc]init];imageView.frame = CGRectMake(10, 10, 250, 150);[self.view addSubview:imageView];//获取图片UIImage *image = [UIImage imageNamed:@&quot;图片名字&quot;];//设置图片四周的保护区域 对保护区域以外的地方进行拉伸 受保护区域不会被拉伸/* UIImageResizingModeStretch 直接拉伸 UIImageResizingModeTile 平铺拉伸填满整个需要展示的区域 UIEdgeInsetsMake(30, 30, 30, 30) 保护区域以外的范围*/image = [image resizableImageWithCapInsets:UIEdgeInsetsMake(30, 30, 30, 30) resizingMode:UIImageResizingModeStretch]; //或者使用 这个方法//image = [image stretchableImageWithLeftCapWidth:imageView.frame.size.width*0.5 topCapHeight:imageView.frame.size.height*0.5 ]; imageView.image = image; 实现效果如下: 以上两种方式都可以实现图片拉伸，如果发现有任何不对的地方欢迎指教，谢谢各位看官…..]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>UIImage拉伸</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用PhotoKit搭建相册选择器]]></title>
    <url>%2F2017%2F06%2F06%2F%E4%BD%BF%E7%94%A8PhotoKit%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[闲谈 iOS8 以后苹果推出新的关于相册的框架-PhotoKit,相比较之前的AssetsLibrary 框架有了很大的提升，由于初次接触这个新的框架，也在网上查找了很多大神的博客资料，本文就浅谈一下自己对这个框架的理解。 介绍PhotoKit 主要有PHAsset、PHFetchOptions、PHFetchResult、PHAssetCollection、PHImageManager、PHCollectionList几个重要的类。 PHAsset:代表照片库的一个资源 也就是具体的某一个照片或者视频。 PHFetchOptions: 获取资源的参数 可以为nil PHFetchResult:表示一系列的资源结果集合，也可以是相册的集合 从PHCollection的方法中获得. PHAssetCollection: PHCollection的子类，表示一个相册或者一个时刻（最近删除、收藏） PHImageManager:用于处理资源的加载，加载图片的过程有缓存，可以使用 PHImageRequestOptions控制资源的输出尺寸等规格 PHCollectionList:表示一组PHCollection 开始搭建 1 由于从相册获取照片之后需要展示，所有首先我们需要创建一个展示你选中照片的界面，因此我使用的是UICollectionView布局界面，并自定义了一个UICollectionViewCell 可以实现删除照片 命名为 - PhotoCell,如下所示： 12345678910111213141516#import &lt;UIKit/UIKit.h&gt;#import &lt;Photos/Photos.h&gt;@class PhotoCell;@protocol PhotoCellDelegate &lt;NSObject&gt;/**删除照片的代理方法*/-(void)deleteThePhotoForCell:(PhotoCell *)cell deleteBtn:(UIButton *)btn;@end @interface PhotoCell : UICollectionViewCell/**图片视图*/@property(nonatomic,strong)UIImageView *photoView;/**删除按钮*/@property(nonatomic,strong)UIButton *deleteBTn;/**代理*/@property(nonatomic,weak) id &lt;PhotoCellDelegate&gt; delegate;@end 2 创建一个管理获取相册资源的工具类 - YHPhotosData,使用这个工具类实现以下功能：获取所有相册列表、获取某一个相册中的照片资源、 将具体某一个照片资源转化为照片。YHPhotosData.h文件中 12345678910#import &lt;Foundation/Foundation.h&gt;#import &lt;Photos/Photos.h&gt;//系统照片的框架@interface YHPhotosData : NSObject//获取所有的相册集+(NSMutableArray *)getAllPhotoListData;//获取某一个相册的所有资源+(NSMutableArray *)getPhotosForPHAssetCollection:(PHAssetCollection *)collection;//从相册的某一个照片资源获取一张高清照片-(void)getImageObject:(id)set Complection:(void(^)(UIImage *photo,BOOL isDegraded))complection;@end YHPhotosData.m文件中 1234567891011121314+(NSMutableArray *)getAllPhotoListData&#123; NSMutableArray *dataArray = [NSMutableArray array]; //1.0列出所有智能相册 PHFetchResult *samrtResult = [PHAssetCollection fetchAssetCollectionsWithType:PHAssetCollectionTypeSmartAlbum subtype:PHAssetCollectionSubtypeAlbumRegular options:nil]; for(int i = 0 ;i&lt;samrtResult.count; i++) &#123; [dataArray addObject:samrtResult[i]]; &#125; //2.0列出所有的用户创建的相册 PHFetchResult *userResult = [PHAssetCollection fetchTopLevelUserCollectionsWithOptions:nil]; for (PHAssetCollection *sub in userResult) &#123; [dataArray addObject:sub]; &#125; return dataArray;&#125; 123456789101112+(NSMutableArray *)getPhotosForPHAssetCollection:(PHAssetCollection *)collection&#123; NSMutableArray *photosArray = [NSMutableArray array]; //1.获取了结果集 PHFetchResult *photosResult = [PHAsset fetchAssetsInAssetCollection:collection options:nil]; //2.便利结果集 取出具体某一张图片资源 添加在数组中 for(PHAsset *set in photosResult)&#123; if(set.mediaSubtypes == PHAssetMediaSubtypeNone)&#123; [photosArray addObject:set]; &#125; &#125; return photosArray;&#125; 1234567891011121314151617181920212223242526272829303132333435-(void)getImageObject:(id)set Complection:(void (^)(UIImage *, BOOL))complection&#123; if ([set isEqual:[PHAsset class]])&#123; PHAsset *photoSet = set; CGFloat mainWidth = [UIScreen mainScreen].bounds.size.width; //1.0算出照片资源自身的比例 CGFloat setScale = photoSet.pixelWidth/photoSet.pixelHeight; //1.1 获取屏幕比例 //屏幕分辨率 scale = 1 代表 分辨率是320 * 480; =2 代表 分辨率是 640 * 960; = 3 代表 分辨率是 1242 * 2208 CGFloat scale = [UIScreen mainScreen].scale; //1.2计算照片在不同屏幕上的像素 CGFloat pixWidth = mainWidth * scale; //1.3根据图片自身比例计算照片在屏幕上的高 CGFloat pixheight = mainWidth/setScale; /** * PHImageManager 是通过请求的方式拉取图像，并可以控制请求得到的图像的尺寸、剪裁方式、质量，缓存以及请求本身的管理（发出请求、取消请求）等 * * @param pixelWidth 获取图片的宽 * @param pixelHeight 获取图片的高 * @param contentMode 图片的剪裁方式 * * @return */ [[PHImageManager defaultManager] requestImageForAsset:photoSet targetSize:CGSizeMake(pixWidth, pixheight) contentMode:PHImageContentModeAspectFit options:nil resultHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) &#123; // 排除取消，错误，低清图三种情况，即已经获取到了高清图 BOOL downloadFinined = (![[info objectForKey:PHImageCancelledKey] boolValue] &amp;&amp; ![info objectForKey:PHImageErrorKey]); if (downloadFinined) &#123; //回调 if (complection)&#123; complection(result,[[info objectForKey:PHImageResultIsDegradedKey] boolValue]); &#125; &#125; &#125;]; &#125;&#125; 3 工具类写完之后，接下来开始创建相册列表控制器 PhotosListVC 用来展示所有的相册列表，同时自定义Cell（我这里定义的是PhotoListCell）用来显示每个相册。cell中显示的照片就是该相册中所有照片中的最后一张。 PhotoListCell 定义非常简单，我在这里就不过多叙述了. 1234/**图片视图*/@property(nonatomic,strong)UIImageView *photoView;/**标题*/@property(nonatomic,strong)UILabel *title; 这里比较重要的一个方法就是 给cell设置默认数据。既相册的标题 以及显示的照片（最后一张）. 12345678910111213141516171819 ///设置数据 -(void)getImageForAssetCollection:(PHAssetCollection *)coll&#123; //获取该相册最后一张照片资源 PHAsset *set = [[YHPhotosData getPhotosForPHAssetCollection:coll] lastObject] ; //转化为照片 并设置数据 （由于相册可能没有照片需要判断一下，给一张默认的照片） [[PHImageManager defaultManager]requestImageForAsset:set targetSize:self.photoView.frame.size contentMode:PHImageContentModeAspectFit options:nil resultHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) &#123; if (result == nil) &#123; self.photoView.image = [UIImage imageNamed:@&quot;no_data&quot;]; &#125;else &#123; self.photoView.image = result; &#125; &#125;]; self.title.text = coll.localizedTitle; &#125; ``` - 4 创建展示相册所有照片的控制器`PhotoShowVC`,并自定义个Cell展示照片,这里我自己定义的是`PhotosShowCell`. `PhotosShowCell.h`中 #import #import //获取点击的照片typedef void (^PhotosShowCellBlock)(UIImage image);@interface PhotosShowCell : UICollectionViewCell/**选择按钮/@property(nonatomic,strong)UIButton selectBTn;//获取点击的那个照片blcok@property(nonatomic,copy)PhotosShowCellBlock cellBlock;//设置数据-(void)setPhotoForPHAsset:(PHAsset )set;@end 1`PhotosShowCell.m`中 //设置cell数据 传递过来的都是一张照片资源 不是照片 需要转化-(void)setPhotoForPHAsset:(PHAsset *)set{ [[PHImageManager defaultManager]requestImageForAsset:set targetSize:self.photoView.frame.size contentMode:PHImageContentModeAspectFit options:nil resultHandler:^(UIImage * _Nullable result, NSDictionary * _Nullable info) { if (result) { // 排除取消，错误，低清图三种情况，即已经获取到了高清图 BOOL downloadFinined = (![[info objectForKey:PHImageCancelledKey] boolValue] &amp;&amp; ![info objectForKey:PHImageErrorKey]); if (downloadFinined) { self.photoView.image =result; if (self.cellBlock) { //获取点击的照片 self.cellBlock(result); } } }else { self.photoView.image = [UIImage imageNamed:@&quot;no_data&quot;]; } }]; } 1在控制器`PhotoShowVC`创建一个可变数组`selectImageArray`存放选中的所有照片，在cell的点击方法中 执行cell的block方法获取到点击的照片, 并存放到数组`selectImageArray`中，同时改变cell上按钮的状态。 -(void)collectionView:(UICollectionView )collectionView didSelectItemAtIndexPath:(NSIndexPath )indexPath{ PhotosShowCell *cell = (PhotosShowCell *)[collectionView cellForItemAtIndexPath:indexPath]; if (cell.selectBTn.selected) { cell.selectBTn.selected = NO; [cell.selectBTn setImage:[UIImage imageNamed:@&quot;select_no&quot;] forState:UIControlStateNormal]; [self.selectImageArray removeObjectAtIndex:indexPath.row]; }else { cell.selectBTn.selected = YES; [cell.selectBTn setImage:[UIImage imageNamed:@&quot;select_yes&quot;] forState:UIControlStateNormal]; [cell setPhotoForPHAsset:self.imageArray[indexPath.row]]; cell.cellBlock = ^(UIImage *image) { [self.selectImageArray addObject:image]; }; } } 1然后在控制器`PhotoShowVC`创建完成、预览按钮以及定义一个返回首页并传递照片到首页的Blcok ，当选择结束点击完成时候，执行Blcok 将选中的图片数组传递到首页。 -(void)clickBtn:(UIButton *)sender{ if (self.selectImageArray.count &gt; 0) { if (self.block) { // [self.navigationController popViewControllerAnimated:YES]; self.block(self.selectImageArray); } }else { NSLog(@&quot;还没选择图片&quot;); } }```预览界面就不在过多叙述了，非常简单，详情看Demo。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>PhotoKit</tag>
        <tag>相册选择器</tag>
      </tags>
  </entry>
</search>